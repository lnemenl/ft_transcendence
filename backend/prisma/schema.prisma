// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite" // As required by the project spec
  url = env("DATABASE_URL") // We'll get the database location from our .env file
}

// This block defines our User "model", which will become a "users" table in the database.
model User {
  id                  String   @id @default(cuid()) // A unique, auto-incrementing number for each user (Primary Key)
  email               String   @unique // The user's email address, which must be unique
  password            String   // Where we will store the securely hashed password
  username            String   @unique
  avatarUrl           String?

  // Fields for Two-Factor Authentication (2FA)
  isTwoFactorEnabled  Boolean @default(false)
  twoFactorSecret     String? //The '?' makes this field optional

  createdAt           DateTime @default(now()) // Automatically set the creation timestamp
  updatedAt           DateTime @updatedAt    // Automatically update the timestamp on any change
  
  // Relation: a user can have multiple refresh tokens (multiple devices)
  refreshTokens       RefreshToken[]
}

// This block defines the users JWT refresh tokens so that the user can refresh their API access token when expired
model RefreshToken {
  id                  String   @id @default(cuid())
  tokenHash           String   @unique // SHA-256 hash of the opaque refresh token (not the raw token)
  user                User     @relation(fields: [userId], references: [id])
  userId              String

  createdAt           DateTime @default(now())
  expiresAt           DateTime
  revoked             Boolean  @default(false)
}